"""–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ —Å aiogram"""

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.utils import markdown as md
import requests

from tinkvest.project_secrets.tokens import TELEGRAMM_TOKEN
from tinkvest.utils.talker import talker_answer
from tinkvest.tinkoff_broker_api import session_data
from tinkvest.utils.logger import logger
from tinkvest import constants

logger = logger(__name__)

bot = Bot(token=TELEGRAMM_TOKEN)

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


@dp.inline_handler()
async def inline_echo(inline_query: types.InlineQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ inline_query"""
    text = inline_query.query or "A"
    print("text:", text)
    items = []
    for i in session_data.instruments:
        if text.lower() in i.ticker.lower() or text.lower() in i.name.lower():
            items.append(types.InlineQueryResultArticle(
                id=i.figi,
                title=f"{i.ticker} ({i.type})",
                description=i.name,
                url=f"https://www.tinkoff.ru/invest/stocks/{i.ticker}/",
                input_message_content=types.InputTextMessageContent(
                    message_text=f"[{i.ticker}](https://www.tinkoff.ru/invest/stocks/{i.ticker})",
                    parse_mode=ParseMode.MARKDOWN
                )
            ))
    await bot.answer_inline_query(inline_query.id,
                                  results=items[:50],
                                  cache_time=1,
                                  switch_pm_text="‚ùî –ü–æ–º–æ—â—å",
                                  switch_pm_parameter="ticker",
                                  )


@dp.chosen_inline_handler()
async def chosen_handler(chosen_result: types.ChosenInlineResult):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–±–æ—Ä–∞ inline_query"""
    res = chosen_result
    logger.info("result_id: %s, query: %s, user.id: %s", res.result_id, res.query, res.from_user.id)


# States
class WelcomeForm(StatesGroup):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞"""
    name = State()
    age = State()
    gender = State()


@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã start"""
    await WelcomeForm.name.set()
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")


# You can use state '*' if you need to handle all states
@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals=constants.STOP_WORDS, ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–π—Ç–∏ –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    current_state = await state.get_state()
    if current_state is None:
        return

    logger.info('Cancelling state %r', current_state)
    await state.finish()
    await message.reply('–û–∫, –∑–∞–∫–æ–Ω—á–∏–ª–∏', reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(state=WelcomeForm.name)
async def process_name(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with state.proxy() as data:
        data['name'] = message.text

    await WelcomeForm.next()
    await message.reply("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")


@dp.message_handler(lambda message: not message.text.isdigit(), state=WelcomeForm.age)
async def process_age_invalid(message: types.Message):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return await message.reply("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (–¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")


@dp.message_handler(lambda message: message.text.isdigit(), state=WelcomeForm.age)
async def process_age(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await WelcomeForm.next()
    await state.update_data(age=int(message.text))

    # Configure ReplyKeyboardMarkup
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.add("–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π")
    markup.add("–î—Ä—É–≥–æ–π")

    await message.reply("–ö–∞–∫–æ–æ–π —É —Ç–µ–±—è –ø–æ–ª?", reply_markup=markup)


@dp.message_handler(lambda message: message.text not in constants.GENDERS, state=WelcomeForm.gender)
async def process_gender_invalid(message: types.Message):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return await message.reply("–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ–¥ –º–æ–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –ø–æ–ª. –í—ã–±–µ—Ä–∏ –ø–æ–ª —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")


@dp.message_handler(state=WelcomeForm.gender)
async def process_gender(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–≤–æ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    async with state.proxy() as data:
        data['gender'] = message.text
        markup = types.ReplyKeyboardRemove()

        await bot.send_message(
            message.chat.id,
            md.text(
                md.text('–û–∫, —Ä–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É,', md.bold(data['name'])),
                md.text('–í–æ–∑—Ä–∞—Å—Ç:', md.code(data['age'])),
                md.text('–ü–æ–ª:', data['gender']),
                sep='\n',
            ),
            reply_markup=markup,
            parse_mode=ParseMode.MARKDOWN,
        )

    # Finish conversation
    await state.finish()


@dp.message_handler(regexp='(^cat[s]?$|puss)')
async def cats(message: types.Message):
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏"""
    url = "https://github.com/aiogram/aiogram/raw/dev-2.x/examples/data/cats.jpg"
    response = requests.get(url)
    await message.reply_photo(response.content, caption='Cats are here üò∫')


async def send_message_by_user_id(chat_id: int = None, caption: str = "qwe", filename: str = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç (173585407)"""
    if not chat_id:
        return
    print("send_message_by_user_id start")
    if filename:
        print("in filename")
        with open(filename, 'rb') as photo:
            print("in with")
            response = await bot.send_photo(chat_id=chat_id, photo=photo, caption=caption)
            print("response:", response)


@dp.message_handler()
async def echo(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
    await message.answer(talker_answer(message.text))
